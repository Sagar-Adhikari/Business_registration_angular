# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AnnexOutput {
  rateList: [Rate!]
  hasChild: Boolean!
  rate: Float
  hasCapital: Boolean
}

type Ape {
  id: ID!
  wardNo: Float!
  title: String!
  description: String!
  createdBy: String!
  createdOn: DateTime!
}

input ApeInput {
  id: Float
  wardNo: Float!
  title: String!
  description: String!
}

type ApeList {
  ape: [Ape!]!
  totalRows: Float!
}

type AuthPayload {
  token: String!
  refreshToken: String!
  user: AuthUser!
}

type AuthUser {
  userId: String!
  email: String!
  fullName: String!
  roleName: String!
  palikaName: String!
  wardNo: Float!
  roleId: Float!
}

type Board {
  id: ID!
  businessId: Float!
  boardLength: Float!
  boardWidth: Float!
  boardArea: Float!
  boardText: String
  boardRate: Float
  boardFee: Float
  business: Business!
}

input BoardInput {
  id: Float
  boardLength: Float!
  boardWidth: Float!
  boardArea: Float!
  boardText: String
  boardRate: Float = 0
  boardFee: Float = 0
}

input BrsInput {
  entryType: Float!
  id: Float
  businessClassId: Float!
  businessTypeId: Float!
  businessSizeId: Float
  businessName: String!
  businessNameEnglish: String!
  redgDate: DateTime!
  panNo: String = ""
  currentCapital: Float!
  workingCapital: Float!
  rate: Float!
  turnOver: Float
  employmentDirect: Float
  employmentIndirect: Float
  remarks: String
  member: MemberInput!
  houseOwner: HouseOwnerInput!
  board: BoardInput
  vehicle: VehicleInput
  map: MapInput
  otherBusiness: OtherBusinessInput
  otherRedg: OtherRedgInput
  verifyBusiness: BusinessVerifyInput
}

type BusilessListWithTotal {
  business: [Business!]!
  totalRows: Float!
  totalCapital: Float!
  totalTurnOver: Float!
  totalEmploymentDirect: Float!
  totalEmploymentInDirect: Float!
  totalRate: Float!
  totalPenalty: Float!
}

type Business {
  id: ID!
  memberId: Float!
  businessClassId: Float!
  businessTypeId: Float!
  businessSizeId: Float
  businessName: String!
  businessNameEnglish: String!
  redgDate: DateTime
  currentCapital: Float!
  workingCapital: Float!
  totalCapital: Float!
  rate: Float!
  turnOver: Float
  employmentDirect: Float
  employmentIndirect: Float
  remarks: String
  createrId: String!
  createdOn: DateTime!
  verifierId: String
  verifiedOn: DateTime
  fYear: String
  printedOn: DateTime
  fullRedgNo: String
  issuedPersonName: String
  redgNo: Float
  status: Float!
  applicationFee: Float
  registrationFee: Float
  penaltyFee: Float
  expireOn: DateTime
  lastRenewDate: DateTime
  verificationDate: DateTime
  month: Float
  totalAmount: Float
  panNo: String
  creater: User!
  verifier: User!
  businessType: Rate!
  businessClass: Rate!
  businessSize: Rate
  member: Member!
  houseOwners: [HouseOwner!]!
  boards: [Board!]
  maps: [Map!]
  otherBusinesses: [OtherBusiness!]
  otherRegistrations: [OtherRedg!]
  vehicles: [Vehicle!]
  notices: [NoticeTo!]
}

type BusinessList {
  business: [Business!]!
  totalRows: Float!
}

type BusinessRenew {
  id: ID!
  originalBusinessId: Float!
  beforeRenewId: Float!
  afterRenewId: Float!
}

type BusinessTotal {
  registerTotal: Float!
  RenewTotal: Float!
  registeredFee: Float!
  renewFee: Float!
  registeredPenalty: Float!
  renewPenalty: Float!
}

input BusinessVerifyInput {
  id: Float!
  fiscalYear: String!
  redgNo: Float!
  issuedPersonName: String!
  applicationFee: Float!
  registrationFee: Float!
  penaltyFee: Float!
  businessTax: Float!
  lastRenewDate: DateTime!
  verificationDate: DateTime!
  totalAmount: Float!
  expireOn: DateTime!
  month: Float!
}

input CertificateNoInput {
  id: Float!
  fyId: String!
  date: DateTime!
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type District {
  id: ID!
  districtName: String!
  stateId: Float!
  state: State!
  municipalities: [Municipality!]!
  membersCitizen: [Member!]!
}

type FiscalYear {
  fiscalYear: String!
}

type Graph_FYCompare {
  productId: String!
  productName: String!
  fiscalYear: String!
  countOrRevenue: Float!
}

type Graph_MonthWiseCount {
  productId: String!
  productName: String!
  month: Float!
  count: Float!
}

type Graph_MonthWiseRevenue {
  productId: String!
  productName: String!
  month: Float!
  taxRevenue: Float!
  boardRevenue: Float!
}

type Graph_ProductWiseCount {
  productId: String!
  productName: String!
  count: Float!
}

type Graph_ProductWiseRevenue {
  productId: Float!
  productName: String!
  taxRevenue: Float!
  boardRevenue: Float!
}

type Graph_StatusWise {
  status: Float!
  count: Float!
}

type HouseOwner {
  id: ID!
  name: String!
  municipalityId: Float!
  wardNo: Float!
  street: String
  tole: String!
  houseNo: String!
  monthlyRent: Float!
  rentFrequency: String!
  businessId: Float!
  stateId: Float!
  districtId: Float!
  municipality: Municipality!
  business: Business!
}

input HouseOwnerInput {
  id: Float
  name: String!
  municipalityId: Float!
  wardNo: Float!
  tole: String!
  street: String
  houseNo: String!
  monthlyRent: Float!
  rentFrequency: String!
}

input LocationInput {
  id: Float
  lat: Float
  lng: Float
}

type Map {
  id: ID!
  businessId: Float!
  lat: Float
  lng: Float
  business: Business!
}

input MapInput {
  id: Float
  lat: Float!
  lng: Float!
}

type Member {
  id: ID!
  nameInNepali: String!
  nameInEnglish: String!
  citizenShipNo: String!
  citizenShipDistrictId: String!
  citizenShipIssueDate: DateTime!
  panNo: String
  phoneNo: String
  mobileNo: String
  faxNo: String
  email: String
  fathersName: String
  mothersName: String
  grandFathersName: String
  photoURL: String
  citizenShipDistrict: District!
  businesses: [Business!]!
  memberAddresses: [MemberAddress!]!
}

type MemberAddress {
  id: ID!
  memberId: Float!
  addressType: Float!
  stateId: Float!
  districtId: Float!
  municipalityId: Float!
  wardNo: Float!
  tole: String
  houseNo: String!
  municipality: Municipality!
  member: Member!
}

input MemberAddressInput {
  id: Float
  addressType: Float!
  municipalityId: Float!
  wardNo: Float!
  tole: String
  houseNo: String
}

input MemberInput {
  id: Float
  nameInNepali: String!
  nameInEnglish: String!
  citizenShipNo: String!
  citizenShipDistrictId: String!
  citizenShipIssueDate: DateTime!
  panNo: String = ""
  phoneNo: String
  mobileNo: String
  faxNo: String
  email: String
  fathersName: String
  mothersName: String
  grandFathersName: String
  temporaryAddress: MemberAddressInput!
  permanentAddress: MemberAddressInput!
}

type Municipality {
  id: ID!
  municipalityName: String!
  districtId: Float!
  district: District!
  houseOwners: [HouseOwner!]
  membersMunicipality: [MemberAddress!]
}

type Mutation {
  backupDB: Boolean
  setApe(data: ApeInput!): Ape!
  deleteApe(id: Float!): Boolean
  verifyBusiness(data: BusinessVerifyInput!): Business!
  markAsPrinted(id: Float!): Boolean
  registerBusiness(image: Upload, data: BrsInput!): Business!
  deleteBusiness(id: Float!): Boolean
  setBusinessLocation(data: LocationInput!): Boolean!
  setNotice(data: NoticeInput!): Notice!
  createParam(data: ParamInput!): Param!
  deleteParam(id: Float!): Boolean!
  updateParamValue(data: ParamValueInput!): Boolean!
  createRate(data: RateInput!): Rate!
  deleteRate(id: Float!): Boolean!
  login(password: String!, email: String!): AuthPayload
  createUser(data: UserAddInput!): User!
  editUser(data: UserEditInput!): Boolean!
  changePassword(data: ChangePasswordInput!): Boolean
  passwordReset(data: ResetPasswordInput!): Boolean
  deleteUser(id: String!): Boolean
  editWard(data: WardInput!): Boolean!
  setWardLocation(data: WardLocationInput!): Boolean!
}

type Notice {
  id: ID!
  title: String!
  message: String!
  createrId: String!
  createdOn: DateTime!
  noticeTo: [NoticeTo!]!
}

input NoticeInput {
  id: Float
  title: String!
  message: String!
  noticeTo: [NoticeToInput!]!
}

type NoticeList {
  notices: [Notice!]!
  totalRows: Float!
}

type NoticeTo {
  id: ID!
  noticeId: Float!
  mobileNo: Float!
  businessId: Float!
  business: Business!
  notice: Notice!
}

input NoticeToInput {
  id: Float
  mobileNo: Float!
  businessId: Float!
}

type NumberAndPenalty {
  certificateNumber: Float!
  penalty: Float!
  totalYear: Float!
}

type OtherBusiness {
  id: ID!
  businessId: Float!
  otherBusinessType: String!
  otherBusinessNo: String
  otherBusinessRedgDate: DateTime
  business: Business!
}

input OtherBusinessInput {
  id: Float
  otherBusinessType: String!
  otherBusinessNo: String!
  otherBusinessRedgDate: DateTime!
}

type OtherRedg {
  id: ID!
  businessId: Float!
  otherRedgOffice: String!
  otherRedgNo: String!
  redgDate: DateTime!
  business: Business!
}

input OtherRedgInput {
  id: Float
  otherRedgOffice: String!
  otherRedgNo: String!
  redgDate: DateTime!
}

input PaginationInput {
  pageNo: Int!
  pageSize: Int!
  filter: [String!]
  sort: [String!]
}

type Palika {
  id: ID!
  palikaName: String!
  lat: Float
  lng: Float
  telNo: String
  wards: [Ward!]!
}

type Param {
  id: ID!
  name: String!
  parentId: Float
  isSystem: Boolean!
  isGroup: Boolean!
  level: String!
  parent: Param!
  details: [ParamDetails!]!
}

type ParamDetails {
  id: ID!
  paramId: Float!
  dataTypeId: Float!
  paramCode: String!
  description: String!
  defaultValue: String
  dataType: SystemDatatype!
  script: [ParamScript!]!
  selectList: [ParamSelectOption!]
}

input ParamInput {
  id: Float
  name: String!
  parentId: Float!
  isGroup: Boolean!
  dataTypeId: Float
  paramCode: String
  description: String
  script: String
}

type ParamScript {
  id: ID!
  paramDetailId: Float!
  script: String!
}

type ParamSelectOption {
  id: String!
  text: String!
}

input ParamValueInput {
  id: Float!
  dataTypeId: Float!
  defaultValue: String!
}

type Query {
  getApeById(id: Float!): Ape
  getAllApe(data: PaginationInput!): ApeList
  getAnnex(id: Float!): AnnexOutput
  getAnnexRate(capital: Float!, id: Float!): Float!
  getStates: [State!]!
  getDistricts: [District!]!
  getCities: [Municipality!]!
  getDistrictByStateId(stateId: Float!): [District!]!
  getCityByDistrictId(districtId: Float!): [Municipality!]!
  getCertificateDetailsByIdOfMember(id: Float!): Member!
  getCertificateDetailsById(id: Float!): Business!
  isValidRedgNo(fYear: String!, wardNo: Float!, redgNo: Float!): Boolean!
  getAllBusiness(data: PaginationInput!): BusinessList
  getMonthlyReport(tDate: DateTime!, fDate: DateTime!, wardNo: Float!): BusinessTotal
  getAllBusinessWithTotal(data: PaginationInput!): BusilessListWithTotal
  getAllBusinessForList(data: PaginationInput!): BusinessList
  getMember(citizenshipNo: String!, districtId: Float!): Member
  getBusiness(id: Float!): Business
  getGraph: [Graph_StatusWise!]!
  getStatusWiseCount: [Graph_StatusWise!]!
  getProductWiseCount: [Graph_ProductWiseCount!]!
  getFiscalYearList: [FiscalYear!]!
  getFiscalYearWiseCount(fiscalYear: String!): [Graph_ProductWiseCount!]!
  getFiscalYearWiseRevenue(fiscalYear: String!): [Graph_ProductWiseRevenue!]!
  getMonthWiseCount(fiscalYear: String!): [Graph_MonthWiseCount!]!
  getMonthWiseRevenue(fiscalYear: String!): [Graph_MonthWiseRevenue!]!
  getFiscalYearCompareRevenue: [Graph_FYCompare!]!
  getFiscalYearCompareCount: [Graph_FYCompare!]!
  getCertificateNoAndPenalty(data: CertificateNoInput!): NumberAndPenalty!
  getBusinessLocation: [Map!]!
  getBusinessLocationById(id: Float!): Map!
  getMobileNo(type: Float!, flag: Float!): [Member!]
  getAllNotice(data: PaginationInput!): NoticeList
  palikas(page: PaginationInput!): [Palika!]
  getSystemDataTypes: [SystemDatatype!]
  getGroupParam: [Param!]
  getChildParam(parentId: Float): [Param!]
  getParamById(id: Float!): Param
  getParamWithDetails(id: Float!): Param
  getParamListForDefaultValue: [Param!]
  getParamValues: [ParamDetails!]
  getParamTable: [Param!]
  getParamDetailsTable: [ParamDetails!]
  getParamScriptTable: [ParamScript!]
  getParamValueByParamCode(code: String!): ParamDetails
  getGroupRates: [Rate!]
  getChildRate(parentId: Float!): [Rate!]
  getRateById(id: Float!): Rate
  getAnnex4: [Rate!]
  getAnnex4OrderByCaption: [Rate!]
  roles: [Role!]
  users(page: PaginationInput!): [User!]
  getAllUsers(data: PaginationInput!): UserList
  getUserById(id: String!): User
  wards(page: PaginationInput!): [Ward!]
}

type Rate {
  id: ID!
  caption: String!
  parentId: Float
  capital: Float
  rate: Float
  isGroup: Boolean!
  parent: Rate
  children: [Rate!]!
  level: String!
  businessTypes: [Business!]!
  businessClasses: [Business!]!
  businessSizes: [Business!]
}

input RateInput {
  id: Float
  caption: String!
  parentId: Float!
  capital: Float
  rate: Float
  isGroup: Boolean!
}

input ResetPasswordInput {
  id: String!
  newPassword: String!
}

type Role {
  id: ID!
  roleName: String!
  users: [User!]!
}

type State {
  id: ID!
  stateName: String!
  districts: [District!]!
}

type SystemDatatype {
  id: ID!
  datatype: String!
}

type TempAddress {
  id: ID!
  state: String!
  district: String!
  city: String!
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type User {
  id: ID!
  roleId: Int!
  wardId: Int
  firstName: String!
  lastName: String!
  email: String!
  mobileNo: String!
  passwordChangedOn: DateTime
  status: Float!
  createdOn: DateTime!
  isPasswordReset: Boolean!
  fullName: String!
  role: Role!
  ward: Ward
  businessCreated: [Business!]!
  businessVerified: [Business!]!
}

input UserAddInput {
  password: String!
  firstName: String!
  lastName: String!
  email: String!
  status: Float!
  mobileNo: String
  roleId: Float!
  wardId: Float!
}

input UserEditInput {
  id: ID!
  firstName: String!
  lastName: String!
  status: Float!
  mobileNo: String
  roleId: Float!
  wardId: Float
}

type UserList {
  users: [User!]!
  totalRows: Float!
}

type Vehicle {
  id: ID!
  businessId: Float!
  vehicleRedgNo: String
  vehicleRedgDate: DateTime
  vehicleTax: Float!
  business: Business!
}

input VehicleInput {
  id: Float
  vehicleRedgNo: String!
  vehicleRedgDate: DateTime!
  vehicleTax: Float!
}

type Ward {
  id: ID!
  palikaId: Float!
  wardNo: Int!
  address: String!
  telNo: String
  lat: Float
  lng: Float
  isDefault: Boolean!
  palika: Palika!
  users: [User!]
}

input WardInput {
  id: ID!
  address: String
  telNo: String
  lat: Float
  lng: Float
  isDefault: Boolean!
}

input WardLocationInput {
  id: [Float!]!
  lat: [Float!]!
  lng: [Float!]!
}
